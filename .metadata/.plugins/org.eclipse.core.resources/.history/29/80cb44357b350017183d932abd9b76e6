/**
 * 
 */
package 拓扑结构相同子树;

/**
 * @author xuanfeng
 *
 */
public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		

	}
	
	public class TreeNode {
		int val = 0;
		TreeNode left = null;
		TreeNode right = null;
		public TreeNode(int val) {
			this.val = val;
		}
	}
	
	/**
	 * 对于两棵彼此独立的二叉树A和B，请编写一个高效算法，检查A中是否存在一棵子树与B树的拓扑结构完全相同。

	 * 给定两棵二叉树的头结点A和B，请返回一个bool值，代表A中是否存在一棵同构于B的子树。
	 * @param A
	 * @param B
	 * @return
	 */
	public boolean chkIdentical(TreeNode A, TreeNode B) {
		String strA = "";
		traverse(A, strA);
		
		String strB = "";
		traverse(B, strB);
		
		if(strA.contains(strB)) {
			return true;			
		} 
	
		return false;
    }
	
	public void traverse(TreeNode node, String str) {
		if(null != node) {
			str += String.valueOf(node.val) + '#';
		}
		else {
			return;
		}
			
		
		traverse(node.left, str);
		traverse(node.right, str);
	}
	
	
	/**
	 * 
	 * @author xuanfeng
	 *
	 */
	public class Transform {
	    public boolean chkTransform(String A, int lena, String B, int lenb) {
			return false;
	        // write code here
	    }
	}
}

